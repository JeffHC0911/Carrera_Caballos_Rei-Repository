package src.ejercicio_thread_ddr_4;

import java.util.Observable;
import java.util.Observer;
import java.awt.Component;
import java.awt.Image;
import java.awt.Graphics;

import javax.swing.DefaultListCellRenderer;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;

class ImageRenderer extends DefaultListCellRenderer {
    JLabel lbl = new JLabel();

    @Override
    public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
        if (value instanceof ImageIcon) {
            lbl.setIcon((ImageIcon) value);
        }
        return lbl;
    }
}

@SuppressWarnings("deprecation")
public class FrmCarrera extends javax.swing.JFrame implements Observer {

    private Thread[] hilos;
    
    
    public FrmCarrera() {
        initComponents();
        hilos = new Thread[4];
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pg1 = new javax.swing.JProgressBar() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                ImageIcon icon = new ImageIcon(getClass().getResource("../../assets/caballo.png")); // Cambia la ruta por la ubicación de tus imágenes
                Image image = icon.getImage();

                int progressWidth = (int) ((float) getWidth() * getPercentComplete()); // Calcula el ancho de la imagen según el progreso de la barra
                int imageWidth = (int) ((float) getWidth() * 0.1);  // Ajusta el 20% del ancho de la barra para la imagen
                int imageHeight = (int) ((float) getHeight() * 0.8);  // Ajusta el 80% de la altura de la barra para la imagen

                int x = progressWidth - imageWidth;  // Calcula la posición x para desplazar la imagen justo antes de la cabecera de la barra
                if (x < 0) {
                    x = 0;  // Asegura que la posición x no sea menor que 0
                }
                int y = (getHeight() - imageHeight) / 2;  // Calcula la posición y para centrar la imagen verticalmente

                g.drawImage(image, x, y, x + imageWidth, y + imageHeight, 0, 0, image.getWidth(this), image.getHeight(this), this);
            }
        };
        pg1.setOrientation(javax.swing.JProgressBar.HORIZONTAL);

        jLabel1 = new javax.swing.JLabel();
        pg2 = new javax.swing.JProgressBar() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                ImageIcon icon = new ImageIcon(getClass().getResource("../../assets/caballo2.jpg")); // Cambia la ruta por la ubicación de tus imágenes
                Image image = icon.getImage();

                int progressWidth = (int) ((float) getWidth() * getPercentComplete()); // Calcula el ancho de la imagen según el progreso de la barra
                int imageWidth = (int) ((float) getWidth() * 0.1);  // Ajusta el 20% del ancho de la barra para la imagen
                int imageHeight = (int) ((float) getHeight() * 0.8);  // Ajusta el 80% de la altura de la barra para la imagen

                int x = progressWidth - imageWidth;  // Calcula la posición x para desplazar la imagen justo antes de la cabecera de la barra
                if (x < 0) {
                    x = 0;  // Asegura que la posición x no sea menor que 0
                }
                int y = (getHeight() - imageHeight) / 2;  // Calcula la posición y para centrar la imagen verticalmente

                g.drawImage(image, x, y, x + imageWidth, y + imageHeight, 0, 0, image.getWidth(this), image.getHeight(this), this);
            }
        };
        pg2.setOrientation(javax.swing.JProgressBar.HORIZONTAL);

        jLabel2 = new javax.swing.JLabel();

        pg3 = new javax.swing.JProgressBar() {
            @Override
            protected void paintComponent(Graphics g) {
                 super.paintComponent(g);

                ImageIcon icon = new ImageIcon(getClass().getResource("../../assets/reinel.png")); // Cambia la ruta por la ubicación de tus imágenes
                Image image = icon.getImage();

                int progressWidth = (int) ((float) getWidth() * getPercentComplete()); // Calcula el ancho de la imagen según el progreso de la barra
                int imageWidth = (int) ((float) getWidth() * 0.1);  // Ajusta el 20% del ancho de la barra para la imagen
                int imageHeight = (int) ((float) getHeight() * 0.8);  // Ajusta el 80% de la altura de la barra para la imagen

                int x = progressWidth - imageWidth;  // Calcula la posición x para desplazar la imagen justo antes de la cabecera de la barra
                if (x < 0) {
                    x = 0;  // Asegura que la posición x no sea menor que 0
                }
                int y = (getHeight() - imageHeight) / 2;  // Calcula la posición y para centrar la imagen verticalmente

                g.drawImage(image, x, y, x + imageWidth, y + imageHeight, 0, 0, image.getWidth(this), image.getHeight(this), this);
            }
        };
        pg3.setOrientation(javax.swing.JProgressBar.HORIZONTAL);
        jLabel3 = new javax.swing.JLabel();

        pg4 = new javax.swing.JProgressBar() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                ImageIcon icon = new ImageIcon(getClass().getResource("../../assets/caballo4.jpg")); // Cambia la ruta por la ubicación de tus imágenes
                Image image = icon.getImage();

                int progressWidth = (int) ((float) getWidth() * getPercentComplete()); // Calcula el ancho de la imagen según el progreso de la barra
                int imageWidth = (int) ((float) getWidth() * 0.1);  // Ajusta el 20% del ancho de la barra para la imagen
                int imageHeight = (int) ((float) getHeight() * 0.8);  // Ajusta el 80% de la altura de la barra para la imagen

                int x = progressWidth - imageWidth;  // Calcula la posición x para desplazar la imagen justo antes de la cabecera de la barra
                if (x < 0) {
                    x = 0;  // Asegura que la posición x no sea menor que 0
                }
                int y = (getHeight() - imageHeight) / 2;  // Calcula la posición y para centrar la imagen verticalmente

                g.drawImage(image, x, y, x + imageWidth, y + imageHeight, 0, 0, image.getWidth(this), image.getHeight(this), this);
            }
        };
        pg4.setOrientation(javax.swing.JProgressBar.HORIZONTAL);
        jLabel4 = new javax.swing.JLabel();
        btnIniciar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        lblGanador = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pg1.setStringPainted(true);

        jLabel1.setText("Caballo 1");

        pg2.setStringPainted(true);

        jLabel2.setText("Caballo 2");

        pg3.setStringPainted(true);

        jLabel3.setText("Reinel T.");

        pg4.setStringPainted(true);

        jLabel4.setText("Caballo 4");

        btnIniciar.setText("Arranca");
        btnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIniciarActionPerformed(evt);
            }
        });

        jLabel5.setText("El ganador es: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(pg1, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(pg2, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(pg3, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(pg4, javax.swing.GroupLayout.PREFERRED_SIZE, 533, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(225, 225, 225)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblGanador, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel1))
                    .addComponent(pg1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel2))
                    .addComponent(pg2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel3))
                    .addComponent(pg3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(jLabel4))
                    .addComponent(pg4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblGanador, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(btnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnIniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIniciarActionPerformed

        this.btnIniciar.setEnabled(false);
        this.lblGanador.setText("");
        
        for (int i = 0; i < hilos.length; i++) {
            Caballo c = new Caballo((i+1)+"");
            c.addObserver(this);
            hilos[i] = new Thread(c);
            hilos[i].start();
        }
        
        
        
    }//GEN-LAST:event_btnIniciarActionPerformed

    private void terminar(){
        
        for (int i = 0; i < hilos.length; i++) {
            hilos[i].interrupt();
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmCarrera.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmCarrera().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIniciar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel lblGanador;
    private javax.swing.JProgressBar pg1;
    private javax.swing.JProgressBar pg2;
    private javax.swing.JProgressBar pg3;
    private javax.swing.JProgressBar pg4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {

        Caballo c = (Caballo) o;
        int porcentaje = (int) arg;

        switch (c.getNombre()) {
            case "1":
                this.pg1.setValue(porcentaje);
                break;

            case "2":
                this.pg2.setValue(porcentaje);
                break;

            case "3":
                this.pg3.setValue(porcentaje);
                break;

            case "4":
                this.pg4.setValue(porcentaje);
                break;

        }

        if(porcentaje>=100){
           terminar();
           this.btnIniciar.setEnabled(true);
           this.lblGanador.setText("Caballo "+c.getNombre());
           if (c.getNombre().equals("3")) {
               this.lblGanador.setText("Reinel");
           }
        }
        
        
    }

}